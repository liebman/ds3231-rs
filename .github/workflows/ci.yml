name: CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - ""  # No features (blocking mode)
          - "async"
          - "async,log"
          - "log"
          # Uncomment when chrono supports defmt:
          # - "defmt"
          # - "async,defmt"
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Build
        run: cargo build --verbose --no-default-features --features "${{ matrix.features }}"
      
      - name: Run tests
        run: cargo test --verbose --no-default-features --features "${{ matrix.features }}"

  # Additional checks
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Run clippy (no features)
        run: cargo clippy --no-default-features -- -D warnings
      
      - name: Run clippy (async)
        run: cargo clippy --no-default-features --features async -- -D warnings
      
      - name: Run clippy (log)
        run: cargo clippy --no-default-features --features log -- -D warnings
      
      - name: Run clippy (async + log)
        run: cargo clippy --no-default-features --features "async,log" -- -D warnings
      
      # Uncomment when chrono supports defmt:
      # - name: Run clippy (defmt)
      #   run: cargo clippy --no-default-features --features defmt -- -D warnings
      #
      # - name: Run clippy (async + defmt)
      #   run: cargo clippy --no-default-features --features "async,defmt" -- -D warnings

  # Formatting check
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Coverage analysis
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov
      
      - name: Generate coverage (blocking)
        run: cargo llvm-cov --no-report test
      - name: Generate coverage (blocking,log)
        run: cargo llvm-cov --no-report test --features log
      - name: Generate coverage (async)
        run: cargo llvm-cov --no-report test --features "async"
      - name: Generate coverage (async,log)
        run: cargo llvm-cov --no-report test --features "async,log"
      
      - name: Generate coverage report
        run: cargo llvm-cov report --lcov --output-path lcov.info
      
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: lcov.info
          fail-on-error: true
    